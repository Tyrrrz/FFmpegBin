name: main

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
  schedule:
    - cron: "0 0 1 * *"
  workflow_dispatch:
    inputs:
      skip-version-check:
        type: boolean
        description: Skip version check
        required: false

jobs:
  # Check if the latest version of FFmpeg in vcpkg is newer than the latest release
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout vcpkg
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          repository: microsoft/vcpkg
          ref: master

      - name: Get latest FFmpeg package
        id: latest-ffmpeg
        run: echo "version=$(cat ports/ffmpeg/vcpkg.json | jq -r '.version')" >> $GITHUB_OUTPUT

      - name: Get latest release
        id: latest-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "version=$(gh release view --json tagName --jq .tagName --repo ${{ github.event.repository.full_name }})" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.latest-ffmpeg.outputs.version }}
      stale: ${{ inputs.skip-version-check || steps.latest-ffmpeg.outputs.version != steps.latest-release.outputs.version }}

  # Build FFmpeg for all supported platforms
  pack:
    needs: version

    # Job outputs are passed as strings, so we need to convert the value to an actual boolean
    if: ${{ fromJson(needs.version.outputs.stale) }}

    strategy:
      fail-fast: false
      matrix:
        target-platform:
          - windows
          - linux
          - osx
          - android
        target-arch:
          - arm
          - arm64
          - x86
          - x64
        include:
          # Determine the runner OS based on the target platform
          - target-platform: windows
            os: windows-latest
          - target-platform: linux
            os: ubuntu-latest
          - target-platform: osx
            os: macos-latest
          - target-platform: android
            os: ubuntu-latest
        exclude:
          # Windows arm is obsolete
          - target-platform: windows
            target-arch: arm
          # Linux arm is obsolete
          - target-platform: linux
            target-arch: arm
          # macOS arm does not exist
          - target-platform: osx
            target-arch: arm
          # macOS x86 is obsolete
          - target-platform: osx
            target-arch: x86

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout self
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          path: self/

      - name: Checkout vcpkg
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          repository: microsoft/vcpkg
          ref: master
          path: vcpkg/

      - name: Bootstrap vcpkg
        run: ${{ runner.os == 'Windows' && 'vcpkg/bootstrap-vcpkg.bat' || 'vcpkg/bootstrap-vcpkg.sh' }}

      - name: Install dependencies
        run: ${{ runner.os == 'Windows' && 'self/install-deps.ps1' || 'self/install-deps.sh' }}

      - name: Build FFmpeg
        run: >
          vcpkg/vcpkg install
          --recurse
          --triplet ${{ matrix.target-arch }}-${{ matrix.target-platform }}
          --x-manifest-root self/

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # 4.6.2
        with:
          name: ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}
          path: self/vcpkg_installed/${{ matrix.target-arch }}-${{ matrix.target-platform }}/tools/ffmpeg/
          if-no-files-found: error

  # Create a new release with the tag matching the FFmpeg version
  release:
    needs:
      - version
      - pack

    # Only release when running on master
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'master' }}

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release create ${{ needs.version.outputs.version }}
          --title ${{ needs.version.outputs.version }}
          --notes "Built on $(date +'%Y-%m-%d')"
          --repo ${{ github.event.repository.full_name }}

  # Upload the built artifacts to the release
  deploy:
    needs:
      - version
      - release

    strategy:
      matrix:
        target-platform:
          - windows
          - linux
          - osx
          - android
        target-arch:
          - arm
          - arm64
          - x86
          - x64
        exclude:
          # Windows arm is obsolete
          - target-platform: windows
            target-arch: arm
          # Linux arm is obsolete
          - target-platform: linux
            target-arch: arm
          # macOS arm does not exist
          - target-platform: osx
            target-arch: arm
          # macOS x86 is obsolete
          - target-platform: osx
            target-arch: x86

    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # 4.3.0
        with:
          name: ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}
          path: ffmpeg/

      - name: Set permissions
        if: ${{ matrix.target-platform != 'windows' }}
        run: |
          chmod +x ffmpeg/ffmpeg
          chmod +x ffmpeg/ffplay
          chmod +x ffmpeg/ffprobe

      - name: Create package
        # Change into the artifacts directory to avoid including the directory itself in the zip archive
        working-directory: ffmpeg/
        run: zip -r ../ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}.zip .

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload ${{ needs.version.outputs.version }}
          ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}.zip
          --repo ${{ github.event.repository.full_name }}
