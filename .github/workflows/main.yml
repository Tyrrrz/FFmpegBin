name: main

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
  schedule:
    - cron: "0 0 1 * *"
  workflow_dispatch:
    inputs:
      skip-version-check:
        type: boolean
        description: Skip version check
        required: false

jobs:
  # Check if the latest version of FFmpeg in vcpkg is newer than the latest release
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout vcpkg
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          repository: microsoft/vcpkg
          ref: master

      - name: Get latest FFmpeg package
        id: latest-ffmpeg
        run: echo "version=$(cat ports/ffmpeg/vcpkg.json | jq -r '.version')" >> $GITHUB_OUTPUT

      - name: Get latest release
        id: latest-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "version=$(gh release view --json tagName --jq .tagName --repo ${{ github.event.repository.full_name }})" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.latest-ffmpeg.outputs.version }}
      stale: ${{ inputs.skip-version-check || steps.latest-ffmpeg.outputs.version != steps.latest-release.outputs.version }}

  # Build FFmpeg for all supported platforms
  pack:
    needs: version
    # Job outputs are passed as strings, so we need to convert the value to an actual boolean
    if: ${{ fromJson(needs.version.outputs.stale) }}

    strategy:
      fail-fast: false
      matrix:
        target-platform:
          - linux
          - windows
          - osx
        target-arch:
          - x64
          - x86
          - arm64
        # Determine the runner OS based on the target platform
        include:
          - target-platform: linux
            os: ubuntu-latest
          - target-platform: windows
            os: windows-latest
          - target-platform: osx
            os: macos-latest
        exclude:
          # macOS x86 is not a concept that exists
          - target-platform: osx
            target-arch: x86
          # Can't build for these targets for some reason
          - target-platform: linux
            target-arch: x86
          - target-platform: linux
            target-arch: arm64

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout vcpkg
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          repository: microsoft/vcpkg
          ref: master

      - name: Bootstrap vcpkg
        run: ${{ runner.os == 'Windows' && './bootstrap-vcpkg.bat' || './bootstrap-vcpkg.sh' }}

      - name: Determine configuration
        id: config
        shell: bash
        run: |
          moniker="${{ matrix.target-arch }}-${{ matrix.target-platform }}"

          triplet_preferences=(
            "$moniker-static-release"
            "$moniker-static"
            "$moniker-release"
            "$moniker"
          )

          triplet=$(
            for triplet in "${triplet_preferences[@]}"; do
              if [ -f "triplets/$triplet.cmake" ] || [ -f "triplets/community/$triplet.cmake" ]; then
                echo "$triplet"
                break
              fi
            done
          )

          features=(
            "core"

            "ffmpeg"
            "ffplay"
            "ffprobe"

            "nonfree"

            ${{ !(matrix.target-platform == 'windows' && matrix.target-arch == 'x86') && '"aom"' || '' }}
            ${{ matrix.target-platform != 'osx' && '"amf"' || '' }}
            "ass"
            "avcodec"
            "avdevice"
            "avfilter"
            "avformat"
            "bzip2"
            "dav1d"
            "freetype"
            "fribidi"
            "iconv"
            "ilbc"
            "lzma"
            "modplug"
            "mp3lame"
            ${{ (matrix.target-platform == 'linux' || (matrix.target-platform == 'windows' && matrix.target-arch != 'arm64')) && '"nvcodec"' || '' }}
            "opencl"
            "opengl"
            "openjpeg"
            "openmpt"
            "openssl"
            "opus"
            "postproc"
            "sdl2"
            "snappy"
            "soxr"
            "speex"
            "srt"
            "ssh"
            "swresample"
            "swscale"
            "theora"
            "vorbis"
            "vpx"
            "webp"
            "x264"
            ${{ !(matrix.target-platform == 'windows' && matrix.target-arch == 'arm64') && '"x265"' || '' }}
            "xml2"
            "zlib"
          )

          features_string=$(IFS=, ; echo "${features[*]}")

          echo "triplet=$triplet" >> $GITHUB_OUTPUT
          echo "features=$features_string" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          ${{ runner.os == 'Linux' && 'sudo apt install autoconf' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install automake' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libtool' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libltdl-dev' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libx11-dev' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libxft-dev' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libxext-dev' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libwayland-dev' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libxkbcommon-dev' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libegl1-mesa-dev' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install libibus-1.0-dev' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install nasm' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt install pkg-config' || '' }}
          ${{ runner.os == 'MacOS' && 'brew install autoconf' || '' }}
          ${{ runner.os == 'MacOS' && 'brew install automake' || '' }}
          ${{ runner.os == 'MacOS' && 'brew install libtool' || '' }}
          ${{ runner.os == 'MacOS' && 'brew install libx11' || '' }}
          ${{ runner.os == 'MacOS' && 'brew install libxft' || '' }}
          ${{ runner.os == 'MacOS' && 'brew install libxext' || '' }}
          ${{ runner.os == 'MacOS' && 'brew install nasm' || '' }}

      - name: Build FFmpeg
        run: >
          ./vcpkg install ffmpeg[${{ steps.config.outputs.features }}]
          --triplet ${{ steps.config.outputs.triplet }}
          --recurse

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # 4.6.2
        with:
          name: ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}
          path: installed/${{ steps.config.outputs.triplet }}/tools/ffmpeg/
          if-no-files-found: error

  # Create a new release with the tag matching the FFmpeg version
  release:
    needs:
      - version
      - pack

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release create ${{ needs.version.outputs.version }}
          --title ${{ needs.version.outputs.version }}
          --notes "Built on $(date +'%Y-%m-%d')"
          --repo ${{ github.event.repository.full_name }}

  # Upload the built artifacts to the release
  deploy:
    needs:
      - version
      - release

    strategy:
      matrix:
        target-platform:
          - linux
          - windows
          - osx
        target-arch:
          - x64
          - x86
          - arm64
        exclude:
          # macOS x86 is not a concept that exists
          - target-platform: osx
            target-arch: x86
          # Can't build for these targets for some reason
          - target-platform: linux
            target-arch: x86
          - target-platform: linux
            target-arch: arm64

    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # 4.3.0
        with:
          name: ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}
          path: ffmpeg/

      - name: Set permissions
        if: ${{ matrix.target-platform != 'windows' }}
        run: |
          chmod +x ffmpeg/ffmpeg
          chmod +x ffmpeg/ffplay
          chmod +x ffmpeg/ffprobe

      - name: Create package
        # Change into the artifacts directory to avoid including the directory itself in the zip archive
        working-directory: ffmpeg/
        run: zip -r ../ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}.zip .

      - name: Calculate checksum
        run: >
          shasum ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}.zip
          --algorithm 256
          --binary
          > ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}.zip.sha256

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload ${{ needs.version.outputs.version }}
          ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}.zip
          ffmpeg-${{ matrix.target-platform }}-${{ matrix.target-arch }}.zip.sha256
          --repo ${{ github.event.repository.full_name }}
